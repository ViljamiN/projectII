File Path: C:\Users\Viljami\Desktop\projects/projectII\docker-compose.yml
version: "3.4"

services:
  drill-and-practice:
    build: drill-and-practice
    image: drill-and-practice
    restart: "no"
    volumes:
      - ./drill-and-practice/:/app
    ports:
      - 7777:7777
    depends_on:
      - database
      - flyway
    env_file:
      - project.env

  database:
    container_name: database-p2-64c5ec39-37f0-4f9c-9f99-703b18d72e2c
    image: postgres:14.1
    restart: "no"
    env_file:
        - project.env

  flyway:
    image: flyway/flyway:9.11.0-alpine
    depends_on:
      - database
    volumes:
      - .:/flyway/sql
    command: -connectRetries=60 -baselineOnMigrate=true migrate
    env_file:
      - project.env

  e2e-playwright:
    entrypoint: "/bin/true" # Prevent startup on docker-compose up
    build: e2e-playwright
    image: e2e-playwright
    network_mode: host
    depends_on:
      - drill-and-practice
    volumes:
      - ./e2e-playwright/tests:/e2e-playwright/tests

File Path: C:\Users\Viljami\Desktop\projects/projectII\list.py
import os

def merge_files(input_folder, output_file):
    with open(output_file, 'w', encoding='utf-8') as output:
        for foldername, subfolders, filenames in os.walk(input_folder):
            # Exclude the '.git' folder
            if '.git' in subfolders:
                subfolders.remove('.git')
                
            for filename in filenames:
                # Skip files with '.git' in their name
                if '.git' not in filename:
                    file_path = os.path.join(foldername, filename)
                    with open(file_path, 'rb') as file:
                        output.write(f"File Path: {file_path}\n")
                        content = file.read().decode('utf-8', errors='ignore')
                        output.write(content)
                        output.write('\n\n')



if __name__ == "__main__":
    # folder path which contains all the files is current folder (projectII)
    input_folder = os.getcwd() + "/projectII"
    # output file path same as current directory with name output.txt
    output_file = os.getcwd() + "/projectII/output.txt"
    merge_files(input_folder, output_file)

File Path: C:\Users\Viljami\Desktop\projects/projectII\output.txt


File Path: C:\Users\Viljami\Desktop\projects/projectII\project.env
# Database configuration for Deno's PostgreSQL driver
PGUSER=iikppphcwtwzqv
PGPASSWORD=f43b563ab88e1b76b7540b4a60e94d50c5ed0876a9942b3844b62ba539565367
PGHOST=ec2-34-250-252-161.eu-west-1.compute.amazonaws.com
PGPORT=5432
PGDATABASE=dcs9liuo5t8ru1

File Path: C:\Users\Viljami\Desktop\projects/projectII\README.md
# Project 2: XXX

Write the documentation of your project here. Do not include your personal
details (e.g. name or student number).

Remember to include the address of the online location where your project is
running as it is a key part of the submission.


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\app-launch.js
import { app } from "./app.js";

app.listen({ port: 7777 });


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\app.js
import { Application } from "./deps.js";
import { errorMiddleware } from "./middlewares/errorMiddleware.js";
import { renderMiddleware } from "./middlewares/renderMiddleware.js";
import { serveStaticMiddleware } from "./middlewares/serveStaticMiddleware.js";
import { router } from "./routes/routes.js";

const app = new Application();

app.use(errorMiddleware);
app.use(serveStaticMiddleware);
app.use(renderMiddleware);
app.use(router.routes());

export { app };


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\deps.js
export { configure, renderFile } from "https://deno.land/x/eta@v2.2.0/mod.ts";
export {
  Application,
  Router,
  send,
} from "https://deno.land/x/oak@v12.6.1/mod.ts";
import postgres from "https://deno.land/x/postgresjs@v3.4.2/mod.js";
export { postgres };
export { Session } from "https://deno.land/x/oak_sessions@v4.1.9/mod.ts";
export * as bcrypt from "https://deno.land/x/bcrypt@v0.4.1/mod.ts";
export * as validasaur from "https://deno.land/x/validasaur@v0.15.0/mod.ts";


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\Dockerfile
FROM denoland/deno:alpine-1.37.0

EXPOSE 7777

WORKDIR /app

COPY deps.js .

RUN deno cache deps.js

COPY . .

CMD [ "run", "--unstable", "--watch", "--allow-net", "--allow-read", "--allow-env", "--no-check", "app-launch.js" ]

File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\config\readme.txt
You could add project configuration files here.

File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\database\database.js
import { postgres } from "../deps.js";

source .env

console.log(Deno.env.get("PGUSER"));
console.log(Deno.env.get("PGPASSWORD"));
console.log(Deno.env.get("PGDATABASE"));
console.log(Deno.env.get("PGHOST"));
console.log(Deno.env.get("PGPORT"));

let sql = postgres({
    user: Deno.env.get("PGUSER"),
    password: Deno.env.get("PGPASSWORD"),
    database: Deno.env.get("PGDATABASE"),
    host: Deno.env.get("PGHOST"),
    port: parseInt(Deno.env.get("PGPORT")),
});

export { sql };


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\middlewares\errorMiddleware.js
const errorMiddleware = async (context, next) => {
  try {
    await next();
  } catch (e) {
    console.log(e);
  }
};

export { errorMiddleware };


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\middlewares\renderMiddleware.js
import { configure, renderFile } from "../deps.js";

const renderMiddleware = async (context, next) => {
  configure({
    views: `${Deno.cwd()}/views/`,
  });

  context.render = async (file, data) => {
    context.response.headers.set("Content-Type", "text/html; charset=utf-8");
    context.response.body = await renderFile(file, data);
  };

  await next();
};

export { renderMiddleware };


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\middlewares\serveStaticMiddleware.js
import { send } from "../deps.js";

const serveStaticMiddleware = async (context, next) => {
  if (context.request.url.pathname.startsWith("/static")) {
    const path = context.request.url.pathname.substring(7);

    await send(context, path, {
      root: `${Deno.cwd()}/static`,
    });
  } else {
    await next();
  }
};

export { serveStaticMiddleware };


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\routes\routes.js
import { Router } from "../deps.js";
import * as mainController from "./controllers/mainController.js";

const router = new Router();

router.get("/", mainController.showMain);

export { router };


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\routes\apis\readme.txt
You could add api-related endpoints here.

File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\routes\controllers\mainController.js
import * as statisticsService from "../../services/statisticsService.js";

const showMain = async ({ render }) => {
  const statistics = await statisticsService.getStatistics();
  render("main.eta", { statistics });
};

export { showMain };


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\services\readme.txt
You could add services here

File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\services\statisticsService.js
import { sql } from "../database/database.js";

const getStatistics = async () => {
    const [topicsCount] = await sql`SELECT COUNT(*) FROM topics`;
    const [questionsCount] = await sql`SELECT COUNT(*) FROM questions`;
    const [answersCount] = await sql`SELECT COUNT(*) FROM question_answers`;

    return {
        topicsCount: topicsCount.count,
        questionsCount: questionsCount.count,
        answersCount: answersCount.count,
    };
};

export { getStatistics };


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\static\readme.txt
You could add static content here. Note that you cannot currently submit binary data.

File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\tests\readme.txt
Implement tests here.

File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\views\main.eta
<!-- main.eta -->

<% layout("./layouts/layout.eta") %>

<h1>Hello world!</h1>

<nav>
  <ul>
    <li><a href="/topics">Topics</a></li>
    <li><a href="/quiz">Quiz</a></li>
  </ul>
</nav>

<div>
  <h2>Application Statistics</h2>
  <ul>
    <li>Total Topics: <%= statistics.topicsCount %></li>
    <li>Total Questions: <%= statistics.questionsCount %></li>
    <li>Total Answers: <%= statistics.answersCount %></li>
  </ul>
</div>

<div>
  <a href="/auth/register">Register</a>
  <a href="/auth/login">Login</a>
</div>


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\views\layouts\layout.eta
<%~ it.body %>


File Path: C:\Users\Viljami\Desktop\projects/projectII\drill-and-practice\views\partials\readme.txt
Add any necessary partials here.

File Path: C:\Users\Viljami\Desktop\projects/projectII\e2e-playwright\Dockerfile
FROM mcr.microsoft.com/playwright:v1.38.0-focal

COPY . /e2e-playwright

WORKDIR /e2e-playwright

RUN npm install

CMD [ "npx", "playwright", "test", "--reporter=list" ]

File Path: C:\Users\Viljami\Desktop\projects/projectII\e2e-playwright\package.json
{
  "name": "e2e-playwright-in-docker",
  "version": "1.0.0",
  "dependencies": {
    "playwright": "^1.38.0",
    "@playwright/test": "^1.38.0"
  }
}

File Path: C:\Users\Viljami\Desktop\projects/projectII\e2e-playwright\playwright.config.js
module.exports = {
  timeout: 10000,
  retries: 0,
  reporter: "list",
  workers: 5,
  use: {
    baseURL: "http://localhost:7777",
    headless: true,
    ignoreHTTPSErrors: true,
  },
  projects: [
    {
      name: "e2e-headless-chromium",
      use: {
        browserName: "chromium",
      },
    },
  ],
};

File Path: C:\Users\Viljami\Desktop\projects/projectII\e2e-playwright\tests\hello-world.spec.js
const { test, expect } = require("@playwright/test");

test("Empty test", async ({ page }) => {

});

File Path: C:\Users\Viljami\Desktop\projects/projectII\flyway\sql\V1___initial_schema.sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE,
  password CHAR(60),
  admin BOOLEAN DEFAULT FALSE
);

CREATE TABLE topics (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  name VARCHAR(255) UNIQUE
);

CREATE TABLE questions (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  topic_id INTEGER REFERENCES topics(id),
  question_text TEXT NOT NULL
);

CREATE TABLE question_answer_options (
  id SERIAL PRIMARY KEY,
  question_id INTEGER REFERENCES questions(id),
  option_text TEXT NOT NULL,
  is_correct BOOLEAN DEFAULT FALSE
);

CREATE TABLE question_answers (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  question_id INTEGER REFERENCES questions(id),
  question_answer_option_id INTEGER REFERENCES question_answer_options(id)
);

CREATE UNIQUE INDEX ON users((lower(email)));

INSERT INTO users (email, password, admin)
  VALUES ('admin@admin.com','$2a$10$IML8QCf6xA.alRbW.CG5PuvYc3Qs94vJvoTwbsSehs8s515cUMuZa', true);

INSERT INTO topics (user_id, name)
  VALUES ((SELECT id FROM users WHERE email = 'admin@admin.com'), 'Finnish language');


